buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'http://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

apply plugin: 'idea'

version = '1.0.0-aplha.1'
group = 'com.creativechasm.cropcultivation'
archivesBaseName = 'cropcultivation'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava.options.encoding = 'UTF-8'

sourceSets {
    api {
        java
        resources
        compileClasspath += main.compileClasspath
    }
    main {
        compileClasspath += api.output
    }
}

minecraft {
    mappings channel: 'snapshot', version: '20200723-1.15.1'
    // makeObfSourceJar = false

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                envirlib {
                    source sourceSets.api
                }
                blightbiome {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                envirlib {
                    source sourceSets.api
                }
                blightbiome {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'cropcultivation', '--all', '--output', file('src/generated/resources/')

            mods {
                envirlib {
                    source sourceSets.api
                }
                blightbiome {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url 'https://jitpack.io' }
//    maven { url "https://minecraft.curseforge.com/api/maven/" }
    flatDir { dirs 'libs' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.15.2-31.2.31'

//    implementation fg.deobf('farming-for-blockheads:FarmingForBlockheads_1.15.2-6.1.5')
    implementation fg.deobf('enemeez.simplefarming:simplefarming:1.15.2-1.2.9')
    implementation 'org.spongepowered:mixin:0.8'
}

mixin {
    add sourceSets.main, "mixins.cropcultivation.refmap.json"
//    add sourceSets.api, "mixins.envirlib.refmap.json"
//    defaultObfuscationEnv searge
}

jar {
    exclude '**/*.psd'
    manifest {
        attributes([
                "Specification-Title"     : "cropcultivation",
                "Specification-Vendor"    : "creativechasm",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "creativechasm",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector": "com.creativechasm.cropcultivation.mixin.Connector"
        ])
    }
//    from(configurations.inJar) {
//        into 'META-INF/libraries'
//    }
}

task buildApi(type: Jar) {
    exclude '**/*.psd'
    group = 'com.creativechasm.environment'
    baseName = 'envirlib' // 'archivesBaseName' breaks file naming, use deprecated 'baseName' instead
    version = '1.0.0-aplha.2'
    from sourceSets.api.output
    manifest {
        attributes([
                "Specification-Title"     : "envirlib",
                "Specification-Vendor"    : "creativechasm",
                "Specification-Version"   : "1",
                "Implementation-Title"    : "envirlib",
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "creativechasm",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

reobf {
    buildApi {}
}

jar.finalizedBy('reobfJar')
buildApi.finalizedBy('reobfBuildApi')

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')


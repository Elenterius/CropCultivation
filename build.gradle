buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'http://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

version = '0.0.9-alpha.1'
group = 'com.creativechasm.mods'
archivesBaseName = 'cropcultivation'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava.options.encoding = 'UTF-8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'snapshot', version: '20200723-1.15.1'
    // makeObfSourceJar = false
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                cropcultivation {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                cropcultivation {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'cropcultivation', '--all', '--output', file('src/generated/resources/')

            mods {
                cropcultivation {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "mixins.cropcultivation.refmap.json"
}

repositories {
    maven { url 'https://jitpack.io' }
    maven { url "https://minecraft.curseforge.com/api/maven/" }
    flatDir { dirs 'libs' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.15.2-31.2.33'

    implementation fg.deobf('enemeez.simplefarming:simplefarming:1.15.2-1.3.0')
    implementation fg.deobf('net.blay09.mods:FarmingForBlockheads_1.15.2:6.1.5')
    implementation 'org.spongepowered:mixin:0.8'
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

processResources {
    exclude '**/*.psd'
    doLast {
        println("minimizing JSONs...")
        for (File file in fileTree(dir: outputs.files.asPath, include: "**/*.json")) {
            file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "cropcultivation",
                "Specification-Vendor"    : "creativechasm",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "creativechasm",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector"          : "com.creativechasm.cropcultivation.mixin.Connector"
        ])
    }
}

jar.finalizedBy('reobfJar')

build {
    doLast {
        println("replacing version in README.md...")
        def versionEscaped = version.toString().replace("-", "--")
        def color = versionEscaped.contains("alpha") ? "red" : versionEscaped.contains("beta") ? "yellow" : "green"
        ant.replaceregexp(match:'CropCultivation-([0-9\\.\\-]+[a-z\\.0-9\\-]+)', replace:"CropCultivation-$versionEscaped-$color", flags:'g', byline:true) {
            fileset(dir: '.', includes: 'README.md')
        }
    }
}
